# This script (`before.sh.erb`) is sourced directly into the main Bash script
# that is run when the batch job starts up. It is called before the `script.sh`
# is forked off into a separate process.
#
# There are some helpful Bash functions that are made available to this script
# that encapsulate commonly used routines when initializing a web server:
#
#   - find_port
#       Find available port in range [$1..$2]
#       Default: 2000 65535
#
#   - create_passwd
#       Generate random alphanumeric password with $1 characters
#       Default: 32
#
# We **MUST** supply the following environment variables in this
# `before.sh.erb` script so that a user can connect back to the web server when
# it is running (case-sensitive variable names):
#
#   - $host (already defined earlier, so no need to define again)
#       The host that the web server is listening on
#
#   - $port
#       The port that the web server is listening on
#
#   - $password
#       The plain text password used to authenticate to the web server with

# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module

# Find available port to run server on
port=$(find_port localhost 7000 11000 )
export MAPD_TCP_PORT=${port}

port=$(find_port localhost 7000 11000 )
export MAPD_HTTP_PORT=${port}

port=$(find_port localhost 7000 11000 )
export MAPD_CALCITE_PORT=${port}

## this is the one we need to expose to the proxy
port=$(find_port localhost 7000 11000 )
export MAPD_WEB_PORT=${port}

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

export OMNIROOT=/scratch/$USER/$SLURM_JOB_ID

<%- unless context.omniroot.blank? -%>
myfolder=<%= context.omniroot  %>
mkdir -p $myfolder
[ -d $myfolder ] && export OMNIROOT=$myfolder
<%- end -%>

echo $OMNIROOT

mkdir -p ${OMNIROOT}/{Datasets,omnisci-storage}
##export CONFIG_FILE="${OMNIROOT}/omnisci-storage/omnisci.conf"
### Generate configuration file with secure file permissions
##(
##umask 077
##cat > "${CONFIG_FILE}" << EOL
##[web]
##port = ${port}
##EOL
##)

##cat ${OMNIROOT}/omnisci-storage/omnisci.conf

## For some reason if I use the config.py file to configure the notebook, the package nb_conda_kernels does not seem to work correctly.
#  I will temporarily pass those attributes as command line arguments 
export MY_PASSWD=sha1:${SALT}:${PASSWORD_SHA1}
export MY_BASEURL=/node/${host}/${port}/



